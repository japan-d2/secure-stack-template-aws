AWSTemplateFormatVersion: 2010-09-09
Description: Fast Track - CodePipeline For ECS Fargate to deploy

# ---------------------------- Metadata
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "CodePipeline setting"
        Parameters:
          - CodePipelineName
      - Label:
          default: "Docker image and repository settings"
        Parameters:
          - DockerImageRepositoryName
          - DockerImageTag
      - Label:
          default: "Deployment setting"
        Parameters:
          - FargateClusterName
          - FargateServiceName
          - DockerContainerName


# ---------------------------- Parameters
Parameters:
# ---------------------------- Parameters - CodePipline Setting
  CodePipelineName:
    Description: CodePipeline pipeline name
    Type: String
    MaxLength: 100
    AllowedPattern: "^[a-zA-Z0-9]([a-zA-Z0-9]|[-])+$"

# ---------------------------- Parameters - Docker image & repository setting
  DockerImageRepositoryName:
    Type: String
    MaxLength: 256

  DockerImageTag:
    Type: String
    MaxLength: 256
    Default: latest

# ---------------------------- Parameters - Deployment Setting
  DockerContainerName:
    Type: String
    MaxLength: 256

  FargateClusterName:
    Type: String
    MaxLength: 256

  FargateServiceName:
    Type: String
    MaxLength: 256


#---------------------------- Resources
Resources:
  # Settings of CodePipeline
  ## IAM Role for CodePipeline
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}CodePipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${CodeBuildArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codecommit:GetRepository
                  - codecommit:ListBranches
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                  - codecommit:CancelUploadArchive
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                  - codebuild:BatchGet*
                  - codebuild:Get*
                  - codebuild:List*
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - s3:*
                  - ecs:*
                  - elasticloadbalancing:*
                  - ecr:*
                  - autoscaling:*
                  - iam:PassRole
  ## CodePipeline setting
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Name: !Ref CodePipelineName
      ArtifactStore:
        Type: S3
        Location: !Ref CodeBuildArtifactBucket
      Stages:
        - Name: Source
          Actions:
            # Reference:
            # https://docs.aws.amazon.com/ja_jp/codepipeline/latest/userguide/action-reference-ECR.html
            - Name: DockerImageRepositorySource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: ECR
              RunOrder: 1
              Configuration:
                RepositoryName: !Ref DockerImageRepositoryName
                ImageTag: !Ref DockerImageTag
              OutputArtifacts:
                - Name: DockerImage
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
              InputArtifacts:
                - Name: DockerImage
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: ECS
              Configuration:
                ClusterName: !Ref FargateClusterName
                ServiceName: !Ref FargateServiceName
                FileName: imagedefinitions.json
              RunOrder: 1
              InputArtifacts:
                - Name: BuildOutput

  # Settings of CodeBuild
  ## IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SampleCodeBuildAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: !Sub arn:aws:s3:::${CodeBuildArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetRepositoryPolicy
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
  # Bucket to contain artifact from CodeBuild.
  CodeBuildArtifactBucket:
    Type: AWS::S3::Bucket

  # CodeBuild Project to build imagedefinitions.json
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email)
            build:
              commands:
                - echo Build started on `date`
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Writing image definitions file...
                - echo "[{\"name\":\"${ContainerName}\",\"imageUri\":\"${REPOSITORY_URI}:${IMAGE_TAG}\"}]" > imagedefinitions.json
          artifacts:
            files: imagedefinitions.json
      Environment:
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:18.09.0-1.7.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerImageRepositoryName}
          - Name: ContainerName
            Value: !Ref DockerContainerName
          - Name: IMAGE_TAG
            Value: !Ref DockerImageTag
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole
  # CloudWatch Event Setting to invoke Code Pipeline
  # when the new container image is pushed to the specific repository.
  ## IAM Role for CloudWatch Event
  CloudWatchEventToInvokePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${AWS::StackName}CloudWatchEventPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:StartPipelineExecution
                Resource:
                  - !Join
                    - ":"
                    - - arn:aws:codepipeline
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - !Ref CodePipelineName
  ## CloudWatch Event Rule to invoke CodePipeline
  CloudWatchEventToInvokePipeline:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.ecr
        detail:
          eventName:
            - PutImage
          requestParameters:
            repositoryName:
              - !Ref DockerImageRepositoryName
            imageTag:
              - !Ref DockerImageTag
      Targets:
        - Arn: !Join
          - ":"
          - - arn:aws:codepipeline
            - !Ref AWS::Region
            - !Ref AWS::AccountId
            - !Ref CodePipelineName
          RoleArn: !GetAtt CloudWatchEventToInvokePipelineRole.Arn
          Id: !Sub ${AWS::StackName}CodePipeline

#---------------------------- Output
Outputs:
  CodePipelineServiceRoleName:
    Value: !Ref CodePipelineServiceRole
  CodePipelineServiceRoleArn:
    Value: !GetAtt CodePipelineServiceRole.Arn
  CodePipelineServiceRoleId:
    Value: !GetAtt CodePipelineServiceRole.RoleId
  CodeBuildServiceRoleName:
    Value: !Ref CodeBuildServiceRole
  CodeBuildServiceRoleArn:
    Value: !GetAtt CodeBuildServiceRole.Arn
  CodeBuildServiceRoleRoleId:
    Value: !GetAtt CodeBuildServiceRole.RoleId
  CloudWatchEventToInvokePipelineRoleName:
    Value: !Ref CloudWatchEventToInvokePipelineRole
  CloudWatchEventToInvokePipelineRoleArn:
    Value: !GetAtt CloudWatchEventToInvokePipelineRole.Arn
  CloudWatchEventToInvokePipelineRoleId:
    Value: !GetAtt CloudWatchEventToInvokePipelineRole.RoleId